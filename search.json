[{"title":"Hexo教程","url":"/mhw-hexo.github.io/2021/01/25/Hexo教程/","content":"\n## 前言\n\n2020 - 2 月底鬼使神差的给我的域名[ `mflyyou.cn`](http://www.mflyyou.cn/) 续费三年，2024 - 4 才到期，就琢磨搭建个人网站，Google 了 `hexo` 中一个自己比较喜欢的主题 `hexo-matery-modified` ,然后自己改了改其中的内容。\n\n<!--more-->\n\n博客的具体效果请观摩 [张攀钦的博客](http://mflyyou.cn/)\n\n### 本文概要\n\n- hexo 使用，及怎么去改主题的模板\n- 阿里云服务器，搭建 nginx ,配置 nginx 缓存\n- 百度、谷歌 seo 优化，让你的网站可以被搜索到\n- 阿里 oss 作为图片服务器\n- CDN 加速提高首屏渲染\n- shell 脚本一键部署到 nginx 目录下，将所需静态资源上传到 oss\n\n## Hexo 介绍\n\nhexo 会解析 `markdown` 语法 生成对应的 html ，主题就是 css 样式。\n\n我自己的 hexo [GitHub](https://github.com/zhangpanqin/my-hexo-theme-matery) 克隆之后 `yarn install` 安装依赖。`hexo s` 本地预览效果。\n\n[yarn 中文教程](https://yarn.bootcss.com/)\n\n如果是用 `npm` 安装的依赖包的话，请将 `yarn.lock` 先删除，再 `npm install` 安装。我已在项目下 `.npmrc` 配置依赖包从淘宝镜像下载。\n\n`root` 为项目根路径。\n\n```bash\n# 本地预览\nhexo s\n\n# 根据配置文件和主题，将 root/source/_post 下的 markdown 文件生成 html 内容\nhexo g\n\n# 清空 hexo g 生成的内容，内容在 root/public \nhexo clean\n\n# 将本地生成 url 链接推送到百度，让百度爬取其中的内容进行索引\nhexo d\n\n# 根据 标题名称  在root/source/_post 生成 markdown 文件\nhexo new post 标题名称12345678910111213\n```\n\n### 配置友链\n\n`root/source/_post/friends.json` 配置友链。\n\n![image-20200306225510922](https://img-blog.csdnimg.cn/20200307162300525.png)\n\n### 配置音乐\n\n`root/source/_post/musics.json` 配置音乐列表。\n\n![image-20200306225547485](https://img-blog.csdnimg.cn/20200307162301726.png)\n\n### 导航-关于\n\n`root/source/about/index.md` 配置个人信息。\n\n![image-20200307121049901](https://img-blog.csdnimg.cn/20200307162302606.png)\n\n### 导航-留言\n\n`root/source/contact/index.md` 配置留言展示信息。\n\n![image-20200307121113555](https://img-blog.csdnimg.cn/2020030716230336.png)\n\n### 导航-标签/分类/归档\n\n以上配置信息是在文档的 markdown 文件中配置，然后会根据这些信息生成以上导航的内容。\n\n```txt\n---\n# 名称\ntitle: {{ title }}\n# 文章日期\ndate: {{ date }}\n# 是否在页面推荐文章列表展示\ntop: false\n# 是否在首页轮播\ncover: false\n# 查看文章的密码, sha256 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\npassword: \n# 文章目录\ntoc: true\n# 统计文章\nmathjax: true\n# 文章摘要\nsummary:\n# 文章标签\ntags:\n# 文章分类\ncategories:\n# 文档关联图片,可以配置 url,没配置的话,自动从主题配置文件的 featureImages 属性中自动选取一个\nimg:\n---\n123456789101112131415161718192021222324\n```\n\n文档 md 文件最前面的这些内容就会被利用生成 `标签` `分类` `归档` 内容。\n\n`root/_config.yml` 为 hexo 的配置文件。\n\n`root/themes/_config.yml` 为主题配置文件。\n\n我在配置文件中加看注释，基本看注释就能明白。我重点说几个重要的功能。\n\n### gitalk 配置\n\n基本和这个 [gitalk readme](https://github.com/gitalk/gitalk/blob/master/readme-cn.md)\n\n![image-20200306222243375](https://img-blog.csdnimg.cn/20200307162303650.png)\n\n创建一个公共仓库作为你的博客留言，这个是基于 github 仓库下的 issue 提供的功能。\n\n点击你申请的 app,查看 gitalk 的配置信息\n\n![image-20200306222528779](https://img-blog.csdnimg.cn/20200307162304216.png)\n\n注意 gitalk 的 配置信息不要泄露\n\n```yaml\n# Gitalk 评论模块的配置，默认为不激活\ngitalk:\n  enable: true\n  # 配置你的用户名\n  owner: zhangpanqin\n  # 配置一个公共仓库储存聊天记录。\n  repo: hexo-gitalk\n  oauth:\n      # 填写你申请的 Client ID\n    clientId: \n    # 填写 Client Secret\n    clientSecret: \n  # 配置你的用户名\n  admin: zhangpanqin12345678910111213\n```\n\n![image-20200306222904462](https://img-blog.csdnimg.cn/20200307162304747.png)\n\n### valine\n\ngitalk 是需要登录 `github` 才能登录的，valine 是不需要登录就可以留言的。\n\n[官网申请账号](https://www.leancloud.cn/)\n\n![image-20200306223337173](https://img-blog.csdnimg.cn/20200307162305465.png)\n\n申请好账号，先创建自己的应用，然后将 `ApplD` 和 `AppKey` 配置到主题文件中去。注意 valine 的 配置信息不要泄露\n\n```yaml\nvaline:\n  enable: true\n  appId: \n  appKey: \n  notify: false\n  verify: false\n  visitor: true\n  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide\n  pageSize: 10\n  placeholder: 'just go go' # Comment Box placeholder\n  background: /medias/comment_bg.png12345678910\n```\n\n> valine 评论如下\n\n![image-20200306223749651](https://img-blog.csdnimg.cn/20200307162305880.png)\n\n### 不蒜子统计\n\n可以在页脚展示你的网站访问量和访问人次，但是会拖慢页面加载，我将其关闭了。\n\n```yaml\n# 不蒜子(http://busuanzi.ibruce.info/) 网站统计,为了网站加载速度,展示关闭\nbusuanziStatistics:\n  enable: false\n  totalTraffic: true # 总访问量\n  totalNumberOfvisitors: true # 总人次1234\n```\n\n### 页面资源配置前置路径\n\n以前的版本，资源只能加载当前网站下的资源，现在可以配置路径前缀。将静态的 css,js 库 、图片资源放到阿里 oss 上去，再利用 cdn 加速，可以提高首屏渲染速度。本地调试的时候 配置 `url` 为空\n\n```yaml\n# 静态资源前缀路径\njsDelivr:\n    url:  12\n```\n\n### 扩展修改\n\n`root/themes/matery/layout` 为模板文件，你会 html 和 css 就能修改，模板的语法也很简单，当你看几篇模板基本就学会了。\n\n### 静态资源位置\n\n`root/themes/matery/source` 为静态资源位置，可将这些资源放到 oss 上去，通过 cdn 加速。\n\n## 部署\n\n基于以上步骤你就可以 `hexo s` 本地预览，我们要部署到服务器上去。\n\n阿里云上买个服务器，我装的是 cenos 7.7系统。\n\n### 创建新用户\n\n为了安全不要用 root 用户操作你的远程服务器。\n\n在阿里云控制台创建新的用户，以后用这个用户操作远程服务器。\n\n```bash\n# 创建 hexo 用户\nadduser hexo\n\n# 修改 hexo 的密码\npasswd admin12345\n\n# 给 hexo 赋予 sudo 命令权限\n\n# 在 root 下运行，修改文件的可写性\nchmod  700 /etc/sudoers\n\n# /etc/sudoers 文件中填写 rabbitmq ALL=(ALL)      PASSWD:ALL\n# 在文件中下拉，找到  root    ALL=(ALL)       ALL\n# 在找到的上述内容下添加，便于维护\nadmin ALL=(ALL)      PASSWD:ALL\n\n# 权限给了之后，修改文件 /etc/sudoers 为只读性\nchmod  400 /etc/sudoers1234567891011121314151617\n```\n\n### 配置 ssh\n\n配置 ssh 之后，你以后只需要。\n\n```bash\n# mflyyou.cn 为你的服务器\nssh mflyyou.cn1\n# 生成秘钥\nssh-keygen -o -t rsa  -b 4096 -c \"生成秘钥对的说明\"\n\n# 指定秘钥生成时路径 /Users/zhangpanqin/.ssh/mflyyou_server_rs.pub\n\n# 将公钥 copy 到 server 中 hexo 为以后登录的用户 ip 为你远程服务器 ip\nssh-copy-id -i /Users/zhangpanqin/.ssh/mflyyou_server_rs.pub hexo@id\n\n# 注意那个用户\n# 或者登录 server 将公钥内容拷贝到了 ~/.ssh/authorized_keys\n\n\n# 验证登录 这个是公钥对应的私钥\nssh -T /Users/zhangpanqin/.ssh/mflyyou_server_rs hexo@ip12345678910111213\n```\n\n#### 配置登录信息\n\n```\n~/.ssh/config\n```\n\n![image-20200306233517287](https://img-blog.csdnimg.cn/20200307162306107.png)\n\nHost 之后配置的是别名， ssh mflyyou 就会找 HostName 对应的 ip 登录。\n\nUser 配置对应的 用户\n\nIdentityFile 配置对应的私钥文件\n\n以上完成就可以 `ssh mflyyou` 登录了。\n\n![image-20200306233759748](https://img-blog.csdnimg.cn/20200307162306895.png)\n\n### 安装 nginx\n\n[nginx 安装教程](https://nginx.org/en/linux_packages.html#RHEL-CentOS)\n\n默认的网站目录为： /usr/share/nginx/html\n\n默认的配置文件为：/etc/nginx/nginx.conf\n\n自定义配置文件目录为: /etc/nginx/conf.d/\n\n```bash\n# 配置开机启动\nsudo systemctl enable nginx\nsudo systemctl stop nginx\nsudo systemctl start nginx\nsudo systemctl restart nginx\n# 查看 nginx 运行状态\nsudo systemctl status nginx\n\n# 检查配置文件 配置是否正确\nsudo nginx -t\n\n# 重新加载配置文件\nsudo nginx -s reload123456789101112\n```\n\n### 修改配置文件\n\n`/etc/nginx/nginx.conf` 配置缓存\n\n```nginx\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    proxy_hide_header X-Powered-By;\n    proxy_hide_header Server;\n\n    # 开启gzip\n    gzip on;\n\n    # 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩\n    gzip_min_length 1k;\n\n    # gzip 压缩级别 1-10\n    gzip_comp_level 2;\n\n    # 进行压缩的文件类型。\n\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n\n    # 是否在http header中添加Vary: Accept-Encoding，建议开启\n    gzip_vary on;\n\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n   include /etc/nginx/conf.d/*.conf;\n\n\n    server {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_name _;\n        root /usr/share/nginx/html;\n        server_tokens off;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        location ~* \\.(html|xml)$ {\n            access_log off;\n            add_header Cache-Control no-cache;\n        }\n\n        location ~* \\.(css|js|png|jpg|jpeg|gif|gz|svg|mp4|mp3|ogg|ogv|webm|htc|woff2|ico|woff|ttf)$ {\n            # 同上，通配所有以.css/.js/...结尾的请求\n            access_log off;\n            # 10 d\n            add_header Cache-Control \"public,max-age=864000\";\n        }\n        error_page 404 /404.html;\n        location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n        }\n    }\n}\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980\n```\n\n主要添加了 `html` 和 `xml` 使用协商缓存，其余静态资源使用强缓存。开启 gzip。\n\n`Cache-Control` 为 http 1.1 关于缓存的配置，优先级最高。\n\nadd_header Cache-Control \"public,max-age=864000” 配置强缓存。\n\n静态资源几乎不变，全部强缓存。访问的时候，在配置的 max-age 内只要浏览器有缓存直接拿，而不会问服务器。没有缓存的话，访问服务器\n\nadd_header Cache-Control no-cache; 配置协商缓存。\n\nhtml 和 xml 文件是生成的，每次可能会变，配置协商缓存，每次访问先询问服务器有没有变化，没变化走缓存，变化从服务器拿。\n\n部署基于以上部分就可以了。但是美中不足的是 首次加载的时候还是卡。为了解决这个问题，也为了写 markdown 的时候图片上传方便，直接买了一个 oss 和 cdn。oss 和 cdn 一年花费会在 100以内。\n\n如果对 oss 和 cdn 不知道是什么，建议直接部署到阿里云服务器就行\n\n[阿里云服务器推广](https://www.aliyun.com/sale-season/2020/procurement-new-members?userCode=hmiptg58)\n\n## 阿里 oss\n\n我买 oss 的原因是为了用 `typora` 写文章的时候上传图片省事 ，在 `Picgo` 上配置阿里 oss 图床就行。\n\n![image-20200307102712474](https://img-blog.csdnimg.cn/20200307162307468.png)\n\n![image-20200307105001747](https://img-blog.csdnimg.cn/20200307162307828.png)\n\noss 提供了图形化上传 和 脚本上传。结合 `shell` 可以一键将静态资源上传 oss，html 相关上传 nginx 目录下。\n\n![image-20200307103458966](https://img-blog.csdnimg.cn/20200307162308779.png)\n\n创建之后不要忘了设置防盗链。\n\n然后下图的`传输管理` 选项中开启 cdn 加速，cdn 选择流量计费，20 元 100g。oss 外网访问流量会收费（一年也不会超过一百块），如果你想省钱，可以买和你的阿里云服务器相同区域的，然后让访问走内网。\n\n![image-20200307103817414](https://img-blog.csdnimg.cn/20200307162309165.png)\n\n### CDN\n\n![image-20200307104129580](https://img-blog.csdnimg.cn/20200307162309767.png)\n\n`边缘脚本` 语法看阿里官方指南就可以看懂了，根据自己需求添加。比如给图片加水印，所有请求都会给加上 oss 上的访问参数，使所有的图片都有水印效果。\n\n你也可以通过 `回源配置` 将流量回源到你的阿里云服务器， cdn 回源 oss 也是要收费的。\n\n## SEO\n\n### 提交你的链接，让百度索引\n\n[百度站长工具](https://ziyuan.baidu.com/linksubmit/index)\n\n提交你的链接\n\n![image-20200307113739724](https://img-blog.csdnimg.cn/20200307162310145.png)\n\n![image-20200307113904879](https://img-blog.csdnimg.cn/20200307162310306.png)\n\n在 `roo/_config.yml`将 site 对应 host，token 对应 token。`hexo d` 就会将链接推送百度。我写的脚本，deploy.sh 会自动推送。\n\n自动推送，会在你访问链接的时候，推送百度，只需配置就可以了。\n\n```yml\n# 推送你需要让百度索引的链接\nbaiduPush: true1\n```\n\n### 百度分析\n\n[百度分析](https://tongji.baidu.com/)\n\n![image-20200307114720921](http://oss.mflyyou.cn/blog/20200307114721.png?author=zhangpanqin)\n\n填写上述 id\n\n```yaml\nbaiduAnalytics:\n    enable: true\n    # 百度分析 id\n    id: 123\n```\n\n### google 分析\n\n[google 分析](https://analytics.google.com/analytics/web/)\n\n![image-20200307115610409](https://img-blog.csdnimg.cn/20200307162311126.png)\n\n将跟踪 id 配置到 主题配置文件中\n\n```yaml\ngoogleAnalytics:\n  enable: true\n  # 谷歌分析配置申请之后填写你的 id\n  id: 123\n```\n\n[google search console](https://search.google.com/search-console)\n\n在 search console 中添加的你的网站网址，这样 google 会爬取你的网站内容索引。\n\n![image-20200307115742082](http://oss.mflyyou.cn/blog/20200307115742.png?author=zhangpanqin)\n\n提交你的站点地图，让 google 知道爬取哪些页面。\n\n以上配置完成后，过几天就会看到以下效果。百度的更慢，我都 10天了还没动静。\n\n![image-20200307115902993](https://img-blog.csdnimg.cn/20200307162311785.png)\n\n## 脚本一键部署网站\n\n```shell\nBASE_DIR=$(\n    cd $(dirname $0)\n    pwd\n)\n# 进入项目路径下\ncd ${BASE_DIR}\n\nyarn run build\nhexo d\nif [ $? != 0 ]; then\n    echo \"构建失败,退出\"\n    exit -1\nfi\n\n# 拷贝项目路径下 themes/matery/source  到 oss 上去,bukect 替换你 自己的 oss bueket 名称\n\n/Users/zhangpanqin/app/oss/ossutilmac64 cp -rf ${BASE_DIR}/themes/matery/source oss://bukect --meta=Cache-Control:public,max-age=2592000\n\nif [ $? != 0 ]; then\n    echo \"上传 oss 失败,退出\"\n    exit -1\nfi\n\npublic=${BASE_DIR}/public\n\nif [ -d ${public} ]; then\n    scp -rp ${public}/* 用户名@ip:/usr/share/nginx/html/\n    echo \"部署成功\"\nelse\n    echo \"${public} 不存在,部署失败\"\nfi\n12345678910111213141516171819202122232425262728293031\n```\n\n我自己写的 shell 脚本，一直在用。\n\n你只需将 `bucket` 配置你的 bucket 和 oss 配置文件就行。你运行 `ossutilmac64` 会提示你配置秘钥。\n\n用户名一定要配置 ssh ，修改你自己的 ip。\n\n然后 `chmod 744 ./deploy.sh` 让脚本文件可执行。\n\n## 感谢\n\n我基于 `hexo-theme-matery` 和 `hexo-matery-modified` 修改了自己想要的效果。\n\n感觉开源的 hexo 主题 [hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)\n\n感谢韦阳的开源贡献 [hexo-matery-modified](https://github.com/godweiyang/hexo-matery-modified)，让我节省了大量时间。\n\n------\n\n> 本文由 [张攀钦的博客](http://www.mflyyou.cn/) 创作。 可自由转载、引用，但需署名作者且注明文章出处。\n\n> 如转载至微信公众号，请在文末添加作者公众号二维码。微信公众号名称：Mflyyou","tags":["Hexo"],"categories":["Hexo搭建日记"]}]